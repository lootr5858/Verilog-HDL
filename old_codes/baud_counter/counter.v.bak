module baud_counter
(
	input wire			rst,
	input wire			en,
	input wire [19:0] baud,
	input wire [19:0] baud_cnto,
	
	output reg			valid_baud,
	output reg [19:0] baud_cntn,
	output reg			baud_clk
);

localparam [19:0] baud_set = 20'd20;

assign valid_baud = (baud_set == baud) ? 1'b1 : 1'b0;

always @ *
begin

	casex ({rst, en, baud_cnto})
	
	{1'b1, 1'bx, 20'bx}: {baud_cntn, baud_clk} = {20'b0, 1'b0};	// reset control
	
	{1'b0, 1'b0, 20'bx}: {baud_cntn, baud_clk} = {20'b0, 1'b0};	// idling
	
	{1'b0, 1'b1, 20'b0}: {baud_cntn, baud_clk} = {20'b1, 1'b0}; // in cycle
	{1'b0, 1'b1, 20'b1}: {baud_cntn, baud_clk} = {20'b2, 1'b0};
	{1'b0, 1'b1, 20'b2}: {baud_cntn, baud_clk} = {20'b3, 1'b0};
	
	{1'b0, 1'b1, 20'b3}: {baud_cntn, baud_clk} = {20'b0, 1'b1}; // cycle complete
	
	endcase

end

endmodule
